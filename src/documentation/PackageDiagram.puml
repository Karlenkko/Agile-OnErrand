@startuml

'abstract class AbstractList
'abstract AbstractCollection
'interface List
'interface Collection
'
'List <|-- AbstractList
'Collection <|-- AbstractCollection
'
'Collection <|- List
'AbstractCollection <|- AbstractList
'AbstractList <|-- ArrayList
'
'class ArrayList {
'Object[] elementData
'size()
'}
'
'enum TimeUnit {
'DAYS
'HOURS
'MINUTES
'}



Package ControllerState{
    class Controller

    interface Command
    class InitialState
    class CalculateState
    class MapLoadedState
    class RequestLoadedState

    interface State
    Controller --> State
    InitialState ..|> State
    CalculateState ..|> State
    MapLoadedState ..|> State
    RequestLoadedState ..|> State
}
Package Util{
    class XMLParser
    class XMLfileOpener
    class ExceptionXML

    XMLParser --> XMLfileOpener

}
Package Algorithm{
    interface TSP
    class TSP1
    class TemplateTSP
    interface Graph
    class CompleteGraph
    class MapGraph
    class Seqlter

    Controller --> TSP
    TSP1 ..|> TSP
    TemplateTSP ..|> TSP
    CompleteGraph..|> Graph
    Seqlter --> MapGraph

}
Package Model{
    class Intersection
    class Map
    class Mission
    class Request
    class Segment

    Map --> Intersection
    Map --> Segment
    Controller --> Map

    Controller --> Mission
    Mission --> Intersection
    Mission --> Request

    Request --> Intersection
    Segment --> Intersection

}
Package Test{
    class MapGraphTest
    class XMLparserTest

    XMLparserTest --> XMLParser
}
Package View{
    class Window
    class TextualView
    class GraphicalView
    class ButtonListener
    class MouseListener

    Controller --> Window
    Window --> TextualView
    Window --> GraphicalView
    Window --> ButtonListener
    Window --> MouseListener

    TextualView --> Mission

    GraphicalView --> Map
    GraphicalView --> Mission
    GraphicalView --> TSP

    'MouseListener --> Controller
    ButtonListener --> Controller

}
Package Observer{
    class Observer
    class Observable

    TextualView ..|> Observer
    GraphicalView ..|> Observer

    Map --> Observable
    Mission --> Observable
}



'View <--> ControllerState
'ControllerState --> Model
'View -> Model
'Algorithm <- ControllerState
'ControllerState -> Util
'
'Util --> Test
'Algorithm --> Test
'View -> Observer

@enduml